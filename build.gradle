plugins {
  id 'java-library'
  id 'maven-publish'
  id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group = 'su.deltanw'
version = '1.0-SNAPSHOT'

repositories {
  mavenCentral()
  maven {
    name = 'papermc-repo'
    url = 'https://repo.papermc.io/repository/maven-public/'
  }
  maven {
    name = 'sonatype'
    url = 'https://oss.sonatype.org/content/groups/public/'
  }
  maven {
    name = 'elytrium-repo'
    url = 'https://maven.elytrium.net/repo/'
  }
}

dependencies {
  compileOnly 'io.papermc.paper:paper-api:1.20.1-R0.1-SNAPSHOT'
  compileOnly 'net.luckperms:api:5.4'
  api 'net.elytrium.commons:config:1.2.1'
}

def targetJavaVersion = 17
java {
  def javaVersion = JavaVersion.toVersion(targetJavaVersion)
  sourceCompatibility = javaVersion
  targetCompatibility = javaVersion
  if (JavaVersion.current() < javaVersion) {
    toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
  }
}

tasks.withType(JavaCompile).configureEach {
  if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
    options.release = targetJavaVersion
  }
}

processResources {
  def props = [version: version]
  inputs.properties props
  filteringCharset 'UTF-8'
  filesMatching('plugin.yml') {
    expand props
  }
}

task javadocJar(type: Jar) {
  getArchiveClassifier().set("javadoc")
  from(javadoc)
}

javadoc {
  MinimalJavadocOptions options = getOptions()
  options.setEncoding("UTF-8")
  options.setCharSet("UTF-8")
  options.setSource("17")
  options.links("https://docs.oracle.com/en/java/javase/11/docs/api/", "https://jd.adventure.kyori.net/nbt/4.11.0/")

  options.addStringOption("Xdoclint:none", "-quiet")

  // Remove "undefined" from search paths when generating javadoc for a non-modular project. (JDK-8215291)
  if (JavaVersion.current() == JavaVersion.VERSION_11) {
    options.addBooleanOption("-no-module-directories", true)
  }
}

shadowJar {
  getArchiveClassifier() set ''
}

task sourcesJar(type: Jar) {
  getArchiveClassifier().set("sources")
  from(sourceSets.main.getAllSource())
}

publishing {
  publications {
    maven(MavenPublication) {
      from(components.java)

      artifact(javadocJar)
      artifact(sourcesJar)
    }
  }
}

artifacts {
  archives(javadocJar)
  archives(sourcesJar)
}

assemble.dependsOn shadowJar
